unit MySQLConectionSettings;

interface

uses
  System.SysUtils, System.Classes, INIFiles, Exceptions;

type
TMySQLConectionSettings = class
private
  DBName, DBHost, DBUser, DBPassword : String;

  const ConfigPath : String  = 'config\settings.ini'; //Path to config file
public
constructor Create(ProgramPath: String);

function GetDBName() : String;
function GetDBHost() : String;
function GetDBUser() : String;
function GetDBPassword() : String;

end;

implementation

constructor TMySQLConectionSettings.Create(ProgramPath: string);
var
Settings : TINIFile;

begin
if not (DirectoryExists(ExtractFilePath(ProgramPath) + ExtractFilePath(ConfigPath))) then
  MkDir(ExtractFilePath(ProgramPath) + ExtractFilePath(ConfigPath));

  Settings := TINIFile.Create(ExtractFilePath(ProgramPath) + self.ConfigPath);
  try
    if not Settings.SectionExists('Database') then
    begin
      Settings.WriteString('Database', 'Host', '');
      Settings.WriteString('Database', 'DatabaseName', '');
      Settings.WriteString('Database', 'User', '');
      Settings.WriteString('Database', 'Password', '');

      raise ESettingsError.Create('Brak konfiguracji bazy. Ustaw prarametry w pliku: ' + self.ConfigPath);
    end;

    self.DBName := Settings.ReadString('Database', 'DatabaseName', '');
    self.DBHost := Settings.ReadString('Database', 'Host', '');
    self.DBUser := Settings.ReadString('Database', 'User', '');
    self.DBPassword := Settings.ReadString('Database', 'Password', '');

  finally
    Settings.Free;
  end;

end;


function TMySQLConectionSettings.GetDBName;
begin
  Result := self.DBName;
end;

function TMySQLConectionSettings.GetDBHost;
begin
  Result := self.DBHost;
end;

function TMySQLConectionSettings.GetDBUser;
begin
  Result := self.DBUser;
end;

function TMySQLConectionSettings.GetDBPassword;
begin
  Result := self.DBPassword;
end;



end.
